function RF_SQUID
clc;close all
%% default values
beta_L=10;
gamma_R=1.2;
A=3;
omega=2;
const_phi_e=1.5;
NOP=200;
T=20;
phi_0=0;
add_noise=0;
noise_amp=0.1;
continuous_run=1;

% Simulation global variables
phi_e=0;
dphi_0=0;
max_potential_phi_plot=3;
min_potential_phi_plot=-3;
run_simulation=0;
phi_vect=[];
phi_e_previous=0;
pulse_times=[];
pulse_widths=[];
pulse_amplitudes=[];
time_point=0;

%% GUI
% Structure
G=figure('position',[70,70,700,550],'MenuBar','none','name','The RF SQUID','ToolBar','none','numbertitle','off');
panel_position=[0.75,0.01,0.23,0.95];
P(1)=uipanel('parent',G,'position',panel_position);
ax(1)=axes('parent',G,'position',[0.1,0.5,0.61,0.45]);
ax(2)=axes('parent',G,'position',[0.1,0.28,0.61,0.15],'xticklabel',[]);
ax(3)=axes('parent',G,'position',[0.1,0.12,0.61,0.15]);

% Legend
annotation(G,'rectangle',...
    'position',[0.1,0.015,0.61,0.04],'units','normalized');
annotation(G,'line',...
    'position',[0.12,0.035,0.06,0.0],'units','normalized',...
    'color',[1,0,0],'linewidth',2)
annotation(G,'textbox',...
    'position',[0.2,0.015,0.1,0.04],'units','normalized'...
    ,'string','\phi',...
    'horizontalAlignment','left','VerticalAlignment','middle',...
    'lineStyle','none');
annotation(G,'line',...
    'position',[0.32,0.035,0.06,0.0],'units','normalized',...
    'color',[0,0,1],'linewidth',2)
annotation(G,'textbox',...
    'position',[0.4,0.015,0.1,0.04],'units','normalized'...
    ,'string','\phi_{ext}',...
    'horizontalAlignment','left','VerticalAlignment','middle',...
    'lineStyle','none');
annotation(G,'line',...
    'position',[0.52,0.035,0.06,0.0],'units','normalized',...
    'color',[0,1,0],'linewidth',2)
annotation(G,'textbox',...
    'position',[0.6,0.015,0.1,0.04],'units','normalized'...
    ,'string','|V|',...
    'horizontalAlignment','left','VerticalAlignment','middle',...
    'lineStyle','none');


%% UI controls
% for loop is used to allow use of the MATLAB code folding feature 
for i=1:1
% start button
start_button=uicontrol('parent',P(1),...
    'style','pushbutton',...
    'string','Start',...
    'Units','Normalized',...
    'position',[0.1,0.02,0.8,0.045],...
    'callback',@start_simulation);
BGColor=get(start_button,'backgroundcolor');

pos=0.95;
panel_relative=[panel_position(3),panel_position(4),1,1];
panel_correct=[panel_position(1),panel_position(2),0,0];
% SQUID parameters
SQUID_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','SQUID Parameters',...
    'Units','Normalized',...
    'position',[0.1,pos,0.8,0.045]);

pos=pos-0.045;
beta_L_text=annotation(G,'textbox',...
    'position',([0.1,pos,0.3,0.04].*panel_relative+panel_correct),'units','normalized'...
    ,'string','\beta_L',...
    'horizontalAlignment','left',...
    'lineStyle','none','margin',0);
beta_L_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','beta_L',...
    'string',num2str(beta_L),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.5,pos+0.01,0.4,0.04]);

pos=pos-0.045;
gamma_R_text=annotation(G,'textbox',...
    'position',([0.1,pos,0.3,0.04].*panel_relative+panel_correct),'units','normalized'...
    ,'string','\gamma_R',...
    'horizontalAlignment','left',...
    'lineStyle','none','margin',0);
gamma_R_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','gamma_R',...
    'string',num2str(gamma_R),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.5,pos+0.01,0.4,0.04]);

%simulation contorls
pos=pos-0.045;
simulation_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Simulation Parameters',...
    'Units','Normalized',...
    'position',[0.1,pos,0.8,0.04]);

pos=pos-0.045;
simulation_time_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Sim. time',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.3,0.04]);
simulation_time_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','T',...
    'string',num2str(T),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.5,pos+0.01,0.4,0.045]);

pos=pos-0.04;
continuous_run_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Continuous Run',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.5,0.04]);
continuous_run_control=uicontrol('parent',P(1),...
    'style','checkbox',...
    'tag','continuous_run',...
    'value',continuous_run,...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.7,pos+0.01,0.3,0.04]);


pos=pos-0.045;
NOP_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','NOP',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.3,0.04]);
NOP_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','Points',...
    'string',num2str(NOP),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.5,pos+0.01,0.4,0.04]);

pos=pos-0.045;
phi_0_text=annotation(G,'textbox',...
    'position',([0.1,pos,0.3,0.04].*panel_relative+panel_correct),'units','normalized'...
    ,'string','\phi_{initial}',...
    'horizontalAlignment','left',...
    'lineStyle','none','margin',0);
phi_0_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','phi_0',...
    'string',num2str(phi_0),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.5,pos+0.01,0.4,0.04]);


% excitation type
pos=pos-0.045;
excitation_type_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Excitation ',...
    'Units','Normalized',...
    'position',[0.1,pos,0.8,0.04]);

pos=pos-0.04;
excitation_AC_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','AC',...
    'Units','Normalized',...
    'position',[0.1,pos,0.15,0.04]);
excitation_AC_checkbox=uicontrol('parent',P(1),...
    'style','checkbox',...
    'value',1,...
    'Units','Normalized',...
    'position',[0.3,pos+0.01,0.1,0.04]);
excitation_DC_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','DC',...
    'Units','Normalized',...
    'position',[0.5,pos,0.15,0.04]);
excitation_DC_checkbox=uicontrol('parent',P(1),...
    'style','checkbox',...
    'Units','Normalized',...
    'position',[0.7,pos+0.01,0.1,0.04]);

pos=pos-0.045;
Amplitude_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Amplitude',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.3,0.04]);
Amplitude_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','A',...
    'string',num2str(A),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.5,pos+0.01,0.4,0.04]);

pos=pos-0.045;
omega_text=annotation(G,'textbox',...
    'position',([0.1,pos,0.3,0.04].*panel_relative+panel_correct),'units','normalized'...
    ,'string','\omega',...
    'horizontalAlignment','left',...
    'lineStyle','none','margin',0);
omega_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','omega',...
    'string',num2str(omega),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.5,pos+0.01,0.4,0.04]);

pos=pos-0.045;
DC_flux_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','DC flux',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.3,0.04]);
DC_flux_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','const_phi_e',...
    'string',num2str(const_phi_e),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.5,pos+0.01,0.4,0.04]);

% pulse control
pos=pos-0.045;
pulse_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Pulses',...
    'Units','Normalized',...
    'position',[0.1,pos,0.8,0.04]);

pos=pos-0.045;
pulse_width_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Width',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.3,0.04]);
pulse_width_control=uicontrol('parent',P(1),...
    'style','edit',...
    'string',0.25,...
    'Units','Normalized',...
    'position',[0.5,pos+0.01,0.4,0.04]);

pos=pos-0.045;
pulse_amp_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Amplitude',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.3,0.04]);
pulse_amp_control=uicontrol('parent',P(1),...
    'style','edit',...
    'string',4,...
    'Units','Normalized',...
    'position',[0.5,pos+0.01,0.4,0.04]);

pos=pos-0.06;
pulse_button=uicontrol('parent',P(1),...
    'style','pushbutton',...
    'tag','pulse_button',...
    'string','Send Pulse',...
    'Units','Normalized',...
    'callback',@send_pulse,...
    'position',[0.1,pos+0.01,0.8,0.04]);

% Noise controls
pos=pos-0.08;
Noise_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Add noise',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.5,0.04]);
Noise_control=uicontrol('parent',P(1),...
    'style','checkbox',...
    'tag','add_noise',...
    'value',add_noise,...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.7,pos+0.01,0.3,0.04]);

pos=pos-0.045;
Noise_amp_text=uicontrol('parent',P(1),...
    'style','text',...
    'string','Noise Amplitude',...
    'HorizontalAlignment','left',...
    'Units','Normalized',...
    'position',[0.1,pos,0.5,0.04]);
Noise_amp_control=uicontrol('parent',P(1),...
    'style','edit',...
    'tag','noise_amp',...
    'string',num2str(noise_amp),...
    'Units','Normalized',...
    'callback',@generic_parameter_change_callback,...
    'position',[0.65,pos+0.01,0.25,0.04]);
end

calculate_and_draw_potential
%% Main simulation function
    function draw_simulation_to_axes(varargin)
        t=2;
        t_start=0;
        t_step=T/NOP;
        
        while t>0
            if ~run_simulation
                run_simulation=1;
                break
            end  %if ~run_simulation
            
            % Simulation step time window

            time_vect=t_start*t_step:t_step:(t_start+NOP)*t_step;
            start_time=t_step*(t-1);
            stop_time=t_step*t;
            time_point=(start_time+stop_time)/2;
             
            % Calculate external flux for the time
            phi_e=calculate_external_flux(time_point);

            % simulation step
            h=stop_time-start_time; %time step
            dphi_e=(phi_e-phi_e_previous)/h; %evaluate the derivative of the external flux
            phi_e_previous=phi_e; 
            [phi_0,dphi_0]=Tylor_expanssion_numeric_integration(phi_0,dphi_0,phi_e,dphi_e,h);

            % calculate phi vectors for plot
            min_potential_phi_plot=min(min_potential_phi_plot,phi_0-1);
            max_potential_phi_plot=max(max_potential_phi_plot,phi_0+1);
            phi_vect=linspace(min_potential_phi_plot,max_potential_phi_plot,NOP);
            
            % Claculate potential
            pot=RF_SQUID_potential(phi_e);
            
            % Plot to axes
            
            % Axis 1 - Potnential
            hold(ax(1),'off')
            plot(ax(1),phi_vect,pot)
            xlabel(ax(1),'\phi=2\pi\Phi/\Phi_0')
            ylabel(ax(1),'U(\phi)')
            hold(ax(1),'on')
            plot(ax(1),phi_0,RF_SQUID_potential(phi_e,phi_0),'Marker','+','LineWidth',2,'color',[1,0,0]);
            axis(ax(1),'tight')
            
            % Axis 2 - Voltage
            plot(ax(2),stop_time,abs(dphi_0),'.g')
            hold(ax(2),'on')
            xlim(ax(2),[time_vect(1),time_vect(end)])
            ylabel(ax(2),'| V | / (\Phi_0/2\pi)');
            set(ax(2),'xticklabel',[])
            
            % Axis 3 - phi(t), phi_e(t)
            plot(ax(3),stop_time,phi_0,'.r')
            hold(ax(3),'on')
            plot(ax(3),stop_time(end),phi_e,'.b')
            xlim(ax(3),[time_vect(1),time_vect(end)])
            xlabel(ax(3),'Time')
            ylabel(ax(3),'\phi');
            
            pause(0.005)
           
            %check stop condition
            if continuous_run
                if t>NOP
                    t_start=t-NOP;
                end %if t>NOP
            t=t+1;
            else %continuous_run
                if t==NOP
                    t=-1;
                else %t==NOP
                    t=t+1;
                end %if t==NOP
            end %if continuous_run
           
        end %while

        stop_simulation;
    end % function draw_simulation_to_axes

%% Callback function

    function start_simulation(varargin)
        max_potential_phi_plot=3;
        min_potential_phi_plot=-3;
        phi_0=str2num(get(phi_0_control,'string'));
        dphi_0=0;
        phi_vect=[];
        phi_e_previous=0;
        run_simulation=1;
        pulse_times=[];
        pulse_widths=[];
        pulse_amplitudes=[];
        set(start_button,'backgroundcolor',[1,0.1,0.1]);
        set(start_button,'callback',@stop_simulation)
        set(start_button,'string','Stop');
        set ([simulation_time_control,continuous_run_control,phi_0_control,NOP_control,],'enable','off');
        draw_simulation_to_axes
    end %function start_simulation

    function stop_simulation(varargin)
        hold(ax(2),'off')
        hold(ax(3),'off')
        set(start_button,'string','Start');
        set(start_button,'backgroundcolor',BGColor);
        set(start_button,'callback',@start_simulation)
        set ([simulation_time_control,continuous_run_control,phi_0_control,NOP_control,],'enable','on');
        run_simulation=0;
    end %function stop_simulation

    function change_excitation_type(han,varargin)
        value=get(han,'value');
        switch value
            case 1 %'sinusoidal'
                time_depandent_flux=@sin_phi;
            case 2 %step function
                time_depandent_flux=@step_phi;
            case 3
                time_depandent_flux=@gauss_pulse_phi;
        end %switch
    end %function change_excitation_type

    function generic_parameter_change_callback(han,varargin)
        tag=get(han,'tag');
        switch get(han,'style')
            case 'edit'
                value=(get(han,'string'));
            case 'checkbox'
                value=num2str(get(han,'value'));
        end
        evalc([tag '=' value]);
        if ~run_simulation
            calculate_and_draw_potential
        end
    end %function generic_parameter_change_callback

    function send_pulse(varargin)
        amp=str2num(get(pulse_amp_control,'string'));
        width=str2num(get(pulse_width_control,'string'));
        pulse_times=[pulse_times,time_point];
        pulse_widths=[pulse_widths;width];
        pulse_amplitudes=[pulse_amplitudes;amp];
    end

    function calculate_and_draw_potential
        max_potential_phi_plot=3;
        min_potential_phi_plot=-3;
        phi_vect=linspace(min_potential_phi_plot,max_potential_phi_plot,NOP);
        phi_e=calculate_external_flux(time_point);
        pot=RF_SQUID_potential(phi_e);
        hold(ax(1),'off')
        plot(ax(1),phi_vect,pot)
        xlabel(ax(1),'\phi=2\pi\Phi/\Phi_0')
        ylabel(ax(1),'U(\phi)')
    end

%% Simulation main function
    function phi_e=calculate_external_flux(time_point)
        phi_e=0;
        if get(Noise_control,'value')
            phi_e=phi_e+noise_phi;
        end
        if get(excitation_AC_checkbox,'value')
            phi_e=phi_e+feval(@sin_phi,time_point);
        end
        if get(excitation_DC_checkbox,'value')
            phi_e=phi_e+const_phi_e;
        end
    phi_e=phi_e+gauss_pulse_phi(time_point);
    end

    function [phi_out,dphi_out]=Tylor_expanssion_numeric_integration(phi_in,dphi_in,phi_e,dphi_e,h)
        f(1)=dphi_in;
        f(2)=-(2*gamma_R*dphi_in+beta_L/(2*pi)*sin(2*pi*phi_in)+phi_in-phi_e);
        f=f';
        dfdt=[0;dphi_e];
        df=[0,1;-(beta_L/(2*pi)*cos(2*pi*phi_in)+1),-2\gamma_R];
        out=([phi_in;dphi_in]+h*f+h^2/2*(dfdt+df*f))';
        phi_out=out(1);
        dphi_out=out(2);
    end

%% RF SQUID potential energy
    function out=RF_SQUID_potential(phi_e,phi)
        if ~exist('phi','var')
            phi=phi_vect;
        end
        out=0.5*(phi-phi_e).^2-(beta_L/(2*pi)^2).*cos(2*pi*phi);
    end

%% External flux function
    function n=noise_phi
        n=2*noise_amp*(rand(1)-0.5);
    end

    function phi=sin_phi(t)
        phi=A*sin(omega*t);
    end

    function phi=step_phi(t)
        if t>step_start_time
            phi=A;
        else
            phi=0;
        end
    end

    function phi=gauss_pulse_phi(t)
        phi=0;
        if ~isempty(pulse_times)
            for p=length(pulse_times)
                phi=phi+pulse_amplitudes(p)*exp(-(t-(pulse_times(p)+3*pulse_widths(p)))^2/(2*pulse_widths(p)^2));
            end
        end
    end

end